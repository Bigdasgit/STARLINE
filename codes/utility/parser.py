import argparse

def parse_args():
    parser = argparse.ArgumentParser(description="")
    parser.add_argument('--data_path', nargs='?', default='./../../data/', help='Input data path.')
    parser.add_argument('--dataset', nargs='?', default='Baby', help='Choose a dataset from {Baby, Beauty, Toys_and_Games, MenClothing, WomenClothing}')
    parser.add_argument('--verbose', type=int, default=5, help='Interval of evaluation.')
    parser.add_argument('--epoch', type=int, default=1000, help='Number of epoch.')
    parser.add_argument('--batch_size', type=int, default=1024, help='Batch size.')
    parser.add_argument('--core', type=int, default=5, help='5-core for warm-start; 0-core for cold start.')
    parser.add_argument('--model_name', type=str, help='saved model name')
    parser.add_argument('--early_stopping_patience', type=int, default=10, help='') 
    parser.add_argument('--gpu_id', type=int, default=0, help='GPU id')
    parser.add_argument('--Ks', nargs='?', default='[10]', help='K value of precision/recall/ndcg @ k')
    parser.add_argument('--test_flag', nargs='?', default='part', help='Specify the test type from {part, full}, indicating whether the reference is done in mini-batch')
    parser.add_argument('--target_aware', type=bool, default=True)
    parser.add_argument('--seed', type=int, default=2047)
    parser.add_argument('--regs', type=float, default=1e-5, help='l2 regularization weight')
    parser.add_argument('--lr', type=float, default=1e-4, help='learning rate')
    parser.add_argument('--feat_embed_dim', type=int, default=64, help='embedding dimension')
    parser.add_argument('--alpha', type=float, default=1.0, help='Coefficient of self node features')
    parser.add_argument('--beta', type=float, default=0.1, help='Coefficient of target aware attention')
    parser.add_argument('--n_layers', type=int, default=2, help='Number of graph conv layers')
    parser.add_argument('--has_norm', type=bool, default=True, help='normalize transformed item feature')
    parser.add_argument('--agg', type=str, default='concat', help='Choose from {sum, weighted_sum, concat, fc}')
    parser.add_argument('--gumbel_temp', type=float, default=0.1, help='temperature of gumbel softmax function')
    parser.add_argument('--cl_temp', type=float, default=0.2, help='temperature of infonce loss function')
    parser.add_argument('--cl_decay', type=float, default=0.01, help='infonce loss function weight')
    parser.add_argument('--cos_v', type=int, default=8, help='cosine threshold for visual modality graph')
    parser.add_argument('--cos_t', type=int, default=8, help='cosine threshold for text modality graph')
    return parser.parse_args()

args = vars(parse_args())
print('*' * 25, 'arguments', '*'  * 25)
for key in args.keys():
    print(f"{key}: {args[key]}")
print('*' * 25, 'arguments', '*'  * 25)
